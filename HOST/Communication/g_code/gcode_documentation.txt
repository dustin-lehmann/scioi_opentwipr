# comment wit '#'
# weird formatting to display the info perfectly
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                           DOCUMENTATION
                       ("[!]" == not working)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                        G
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// HL -> ML/LL
G0 - Configuration of the supervisor
>>> G0 E(<SV1>,<SV2>,<SV3>,<SV4>,<SV5>,<SV6>,<SV7>,<SV8>,<SV9>,<SV10>)
G1 - General control input
>>> G1 U(<u1>,<u2>) X<xdot_cmd> P<psidot_cmd>
G2 - Configuration of the state feedback controller
>>> G2 K(<K11,K12,K13,K14,K15,K16,K21,K22,K23,K24,K25,K26>)
G3 - Configuration of the xdot controller
>>> G3 P<p_val> I<i_val> D<d_val> L<enable_limit> MAX<max> MIN<min>
>>> RL<enable_rate_limit> DMAX <dmax> DMIN <dmin>
G4 - Configuration of the psidot controller
>>> G4 P<p_val> I<i_val> D<d_val> L<enable_limit> MAX<max> MIN<min>
>>> RL<enable_rate_limit> DMAX <dmax> DMIN <dmin>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                       M
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// HL -> ML/LL
M0 - Debug message
>>> M0 D"<debug_string>"
M1 - Change FSM state
>>> M1 S<FSM_STATE>, FSM_STATE E [0,4]
M2 - Change controller state
>>> M2 S<CTRL_STATE>, CTRL_STATE E [0,3]
M3 - ML enable/disable logging
>>> M3 E<enable> F"<filename>" (F is optional, default: "log"[.csv])
M4 - Reset LL state vector
>>> M4
M5 - ML client message handler sleep
>>> M5 T<delay_s> (T >= 0.2 is recommended)
// HL -> HL
M61 - Write g-code documentation to terminal
>>> M61
M62 - Clear terminal window
>>> M62
M63 - Execute g-codes from file
>>> M63 F"<filename>" (F is optional, default: "general"[.gcode])
M64 - Display robot data
>>> M64
# TODO: DEBUG START
M65 - Load experiment
>>> M65 F"<filename>" (F is optional, default: "experiment[.yaml]")
M66 - Start experiment
>>> M66 F"<filename>" (F is optional, default: "experiment[.yaml]")
M67 - Load and start experiment
>>> M67 F"<filename>" (F is optional, default: "experiment[.yaml]")
M68 - End experiment
>>> M68 F"<filename>" (F is optional, default: "experiment[.yaml]")
# TODO: DEBUG END
M69 - Load sequence
>>> M69 F"<filename>" (F is optional, default: "sequence[.csv]")
M70 - Start sequence
>>> M70 F"<filename>" (F is optional, default: "sequence[.csv]")
M71 - Load and start sequence
>>> M71 F"<filename>" (F is optional, default: "sequence[.csv]")
M72 - End sequence
>>> M72 F"<filename>" (F is optional, default: "sequence[.csv]")

# #####################################################################################################################
# FURTHER INFORMATION
# #####################################################################################################################
# G-codes
# #####################################################################################################################
# // HL -> ML/LL
# G0 -> _fields_ = [("tick", c_uint32), ("sv_number", c_uint8), ("sv_enable_list", c_uint8 * 9)]
# G1 -> _fields_ = [("tick", c_uint32), ("external_torque", c_float * 2), ("xdot_cmd", c_float),
#                   ("psidot_cmd", c_float)]
# G2 -> _fields_ = [("tick", c_uint32), ("K", c_float * 12)]
# G3 -> _fields_ = [("tick", c_uint32), ("P", c_float), ("I", c_float), ("D", c_float), ("enable_limit", c_uint8),
#                   ("v_max", c_float), ("v_min", c_float), ("enable_rate_limit", c_uint8), ("vdot_max", c_float),
#                   ("vdot_min", c_float)]
# G4 -> _fields_ = [("tick", c_uint32), ("P", c_float), ("I", c_float), ("D", c_float), ("enable_limit", c_uint8),
#                   ("v_max", c_float), ("v_min", c_float), ("enable_rate_limit", c_uint8), ("vdot_max", c_float),
#                   ("vdot_min", c_float)]
#
# #####################################################################################################################
# M-codes
# #####################################################################################################################
# // HL -> ML/LL
# M0 -> _fields_ = [("tick", c_uint32), ("string", c_char * 40)]
# M1 -> _fields_ = [("tick", c_uint32), ("fsm_state", c_uint8)]
# M2 -> _fields_ = [("tick", c_uint32), ("ctrl_state", c_uint8)]
# M3 -> _fields_ = [("tick", c_uint32), ("enable", c_uint8), ("file", c_char * 40)]
# M4 -> _fields_ = [("tick", c_uint32)]
# M5 -> _fields_ = [("tick", c_uint32), ("delay", c_float)]
# // HL -> HL
# M61 -> INTERNAL CALL
# M62 -> INTERNAL CALL
# M63 -> INTERNAL CALL
# M64 -> INTERNAL CALL